apiVersion: v1
kind: Namespace
metadata:
  name: nginx-namespace

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-api-gateway
  namespace: nginx-namespace
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 8000          # HTTP port exposed externally
      targetPort: 8000    # Port used by the NGINX container
  selector:
    app: nginx-api-gateway

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx-namespace
data:
  default.conf: |
    server {
        listen 8000;

        # Global CORS headers for API responses
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

        # Proxy frontend via API Gateway (proxying to frontend service)
        location / {
            proxy_pass http://frontend.nginx-namespace.svc.cluster.local:3002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route to account-api
        location /account/ {
            rewrite ^/account(/.*)$ $1 break;
            proxy_pass http://account-api.backend.svc.cluster.local:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route to canvas-api
        location /canvas/ {
            rewrite ^/canvas(/.*)$ $1 break;
            proxy_pass http://canvas-api.backend.svc.cluster.local:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route to drawing-api (WebSocket support)
        location /draw/ {
            rewrite ^/draw(/.*)$ $1 break;
            proxy_pass http://drawing-api.backend.svc.cluster.local:8080;  # Kubernetes service for drawing-api
            proxy_http_version 1.1;  # WebSocket compatibility
            proxy_set_header Upgrade $http_upgrade;  # WebSocket header
            proxy_set_header Connection "upgrade";  # Explicitly set 'upgrade'
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        
            # Optional: Increase timeout values for long-running connections
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 3600s;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "API Gateway is healthy\n";
            add_header Content-Type text/plain;
        }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-api-gateway
  namespace: nginx-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-api-gateway
  template:
    metadata:
      labels:
        app: nginx-api-gateway
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config
